generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contest {
  id                  String       @id @default(uuid())
  title               String
  startTime           DateTime
  endTime             DateTime
  disableCopyPaste    Boolean      @default(false)
  preventTabSwitching Boolean      @default(false)
  requireFullScreen   Boolean      @default(false)
  blockNavigation     Boolean      @default(false)
  webcamMonitoring    Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  discussions         Discussion[]
  questions           Question[]
  submissions         Submission[]
}

model Question {
  id           String       @id @default(uuid())
  contestId    String
  title        String
  description  String
  inputFormat  String
  outputFormat String
  constraints  String
  sampleInput  String
  sampleOutput String
  points       Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  contest      Contest      @relation(fields: [contestId], references: [id], onDelete: Cascade)
  submissions  Submission[]
  testCases    TestCase[]
}

model TestCase {
  id         String   @id @default(uuid())
  questionId String
  input      String
  output     String
  isHidden   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  email       String       @unique
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  comments    Comment[]
  discussions Discussion[]
  submissions Submission[]
}

model Submission {
  id          String   @id @default(uuid())
  userId      String
  contestId   String
  questionId  String
  code        String
  language    String
  status      String
  score       Int      @default(0)
  totalTests  Int      @default(0)
  passedTests Int      @default(0)
  runtime     Float?
  memory      Float?
  submittedAt DateTime @default(now())
  contest     Contest  @relation(fields: [contestId], references: [id])
  question    Question @relation(fields: [questionId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([contestId, userId])
  @@index([questionId, userId])
}

model Leaderboard {
  id                 String    @id @default(uuid())
  contestId          String
  userId             String
  username           String
  totalScore         Int       @default(0)
  lastSubmissionTime DateTime?
  rank               Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([contestId, userId])
  @@index([contestId, totalScore, lastSubmissionTime])
}

model Discussion {
  id        String    @id @default(uuid())
  contestId String
  userId    String
  title     String
  content   String
  isSticky  Boolean   @default(false)
  isLocked  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  contest   Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@index([contestId, createdAt])
}

model Comment {
  id           String     @id @default(uuid())
  discussionId String
  userId       String
  content      String
  parentId     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  parent       Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[]  @relation("CommentReplies")
  user         User       @relation(fields: [userId], references: [id])

  @@index([discussionId, createdAt])
}
