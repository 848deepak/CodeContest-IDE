"use client";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import SecureContestView from "@/components/SecureContestView";

interface Question {
  id: string;
  title: string;
  points: number;
}

interface Contest {
  id: string;
  title: string;
  startTime: string;
  endTime: string;
  questions: Question[];
  requireFullScreen?: boolean;
  disableCopyPaste?: boolean;
  preventTabSwitching?: boolean;
}

function getStatus(contest: Contest) {
  const now = new Date();
  const start = new Date(contest.startTime);
  const end = new Date(contest.endTime);
  if (now < start) return "upcoming";
  if (now > end) return "past";
  return "ongoing";
}

function getTimeRemaining(endTime: string) {
  const now = new Date().getTime();
  const end = new Date(endTime).getTime();
  const distance = end - now;

  if (distance < 0) return "Contest Ended";

  const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((distance % (1000 * 60)) / 1000);

  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

export default function ContestDetailPage({ 
  params 
}: { 
  params: Promise<{ id: string }> 
}) {
  const router = useRouter();
  const [contest, setContest] = useState<Contest | null>(null);
  const [loading, setLoading] = useState(true);
  const [contestId, setContestId] = useState<string>("");
  const [timeRemaining, setTimeRemaining] = useState<string>("");
  const [securitySettings, setSecuritySettings] = useState({
    requireFullScreen: true,
    disableCopyPaste: true,
    preventTabSwitching: true,
  });
  const [isParticipating, setIsParticipating] = useState(false);

  useEffect(() => {
    async function getParams() {
      const resolvedParams = await params;
      setContestId(resolvedParams.id);
    }
    getParams();
  }, [params]);

  useEffect(() => {
    if (!contestId) return;
    
    async function fetchContest() {
      setLoading(true);
      try {
        const res = await fetch(`/api/contests/${contestId}`);
        if (res.ok) {
          const data = await res.json();
          setContest(data);
          
          // Set security settings from contest data or use defaults
          setSecuritySettings({
            requireFullScreen: data.requireFullScreen ?? true,
            disableCopyPaste: data.disableCopyPaste ?? true,
            preventTabSwitching: data.preventTabSwitching ?? true
          });
        }
      } catch (error) {
        console.error('Error fetching contest:', error);
      }
      setLoading(false);
    }
    fetchContest();
  }, [contestId]);

  // Update countdown timer
  useEffect(() => {
    if (!contest) return;
    
    const timer = setInterval(() => {
      if (getStatus(contest) === "ongoing") {
        setTimeRemaining(getTimeRemaining(contest.endTime));
      }
    }, 1000);

    return () => clearInterval(timer);
  }, [contest]);

  // Disable browser back button after participation starts
  useEffect(() => {
    if (isParticipating) {
      // Push current state to history to ensure popstate can be triggered
      window.history.pushState(null, '', window.location.href);
      
      // Handle popstate (back/forward button) events
      const handlePopState = () => {
        // Push again to prevent navigation
        window.history.pushState(null, '', window.location.href);
      };
      
      // Add event listener
      window.addEventListener('popstate', handlePopState);
      
      // Clean up
      return () => {
        window.removeEventListener('popstate', handlePopState);
      };
    }
  }, [isParticipating]);

  const handleParticipateClick = () => {
    // Push state before entering participation mode to ensure back button is disabled
    window.history.pushState(null, '', window.location.href);
    setIsParticipating(true);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-gray-500">Loading contest...</div>
      </div>
    );
  }
  
  if (!contest) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-gray-500">Contest not found.</div>
      </div>
    );
  }

  const status = getStatus(contest);

  // When participating in an ongoing contest
  if (status === "ongoing" && isParticipating) {
    return (
      <SecureContestView 
        contestId={contest.id}
        requireFullScreen={securitySettings.requireFullScreen}
        disableCopyPaste={securitySettings.disableCopyPaste}
        preventTabSwitching={securitySettings.preventTabSwitching}
      >
        <div className="min-h-screen bg-gray-100">
          <div className="bg-white shadow-sm border-b">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="flex justify-between h-16">
                <div className="flex items-center space-x-4">
                  <h1 className="text-xl font-semibold text-gray-900">{contest.title}</h1>
                </div>
                <div className="flex items-center space-x-4">
                  {timeRemaining && (
                    <div className="bg-red-100 text-red-800 px-3 py-1 rounded font-mono">
                      {timeRemaining}
                    </div>
                  )}
                  <Link 
                    href={`/contests/${contest.id}/leaderboard`}
                    className="text-blue-600 hover:text-blue-800"
                  >
                    Leaderboard
                  </Link>
                  <Link 
                    href={`/contests/${contest.id}/discussion`}
                    className="text-blue-600 hover:text-blue-800"
                  >
                    Discussion
                  </Link>
                </div>
              </div>
            </div>
          </div>

          <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="bg-white rounded-lg shadow-md p-6 mb-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold text-gray-900">{contest.title}</h2>
                <div className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">
                  Ongoing
                </div>
              </div>
              
              <div className="grid md:grid-cols-2 gap-4 text-sm text-gray-600">
                <div>
                  <span className="font-medium">Start Time:</span> {new Date(contest.startTime).toLocaleString()}
                </div>
                <div>
                  <span className="font-medium">End Time:</span> {new Date(contest.endTime).toLocaleString()}
                </div>
                <div>
                  <span className="font-medium">Problems:</span> {contest.questions.length}
                </div>
                <div>
                  <span className="font-medium">Total Points:</span> {contest.questions.reduce((sum, q) => sum + q.points, 0)}
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-md p-6">
              <h3 className="text-lg font-semibold mb-4">Problems</h3>
              <div className="space-y-3">
                {contest.questions.map((question, index) => (
                  <div 
                    key={question.id} 
                    className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50"
                  >
                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-blue-100 text-blue-800 rounded-full flex items-center justify-center text-sm font-medium">
                        {String.fromCharCode(65 + index)}
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">{question.title}</div>
                        <div className="text-sm text-gray-600">{question.points} points</div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      <Link
                        href={`/contests/${contest.id}/problems/${question.id}`}
                        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
                      >
                        Solve
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </SecureContestView>
    );
  }

  // For non-participating view (upcoming, past, or not yet participating in ongoing)
  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center space-x-4">
              <Link href="/contests" className="text-blue-600 hover:text-blue-800">
                ‚Üê Back to Contests
              </Link>
              <h1 className="text-xl font-semibold text-gray-900">{contest.title}</h1>
            </div>
            <div className="flex items-center space-x-4">
              {timeRemaining && status === "ongoing" && (
                <div className="bg-red-100 text-red-800 px-3 py-1 rounded font-mono">
                  {timeRemaining}
                </div>
              )}
              <Link 
                href={`/contests/${contest.id}/leaderboard`}
                className="text-blue-600 hover:text-blue-800"
              >
                Leaderboard
              </Link>
              <Link 
                href={`/contests/${contest.id}/discussion`}
                className="text-blue-600 hover:text-blue-800"
              >
                Discussion
              </Link>
            </div>
          </div>
        </div>
      </div>
      
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-bold text-gray-900">{contest.title}</h2>
            <div className={`px-3 py-1 rounded-full text-sm font-medium ${
              status === "upcoming" ? "bg-yellow-100 text-yellow-800" : 
              status === "ongoing" ? "bg-green-100 text-green-800" : 
              "bg-gray-100 text-gray-800"
            }`}>
              {status.charAt(0).toUpperCase() + status.slice(1)}
            </div>
          </div>
          
          <div className="grid md:grid-cols-2 gap-4 text-sm text-gray-600 mb-6">
            <div>
              <span className="font-medium">Start Time:</span> {new Date(contest.startTime).toLocaleString()}
            </div>
            <div>
              <span className="font-medium">End Time:</span> {new Date(contest.endTime).toLocaleString()}
            </div>
            <div>
              <span className="font-medium">Problems:</span> {contest.questions.length}
            </div>
            <div>
              <span className="font-medium">Total Points:</span> {contest.questions.reduce((sum, q) => sum + q.points, 0)}
            </div>
          </div>
          
          {status === "ongoing" && (
            <>
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                <h3 className="text-lg font-semibold text-yellow-800 mb-2">Contest Security Notice</h3>
                <p className="text-yellow-700 mb-3">
                  When you participate in this contest, the following security measures will be activated:
                </p>
                <ul className="list-disc pl-5 text-yellow-700 mb-4">
                  {securitySettings.requireFullScreen && (
                    <li className="mb-1">Full-screen mode will be required for the duration of the contest</li>
                  )}
                  {securitySettings.disableCopyPaste && (
                    <li className="mb-1">Copy and paste functionality will be disabled to prevent plagiarism</li>
                  )}
                  {securitySettings.preventTabSwitching && (
                    <li className="mb-1">Tab switching and browser navigation will be monitored</li>
                  )}
                  <li>Multiple security violations may result in disqualification</li>
                </ul>
              </div>
              
              <button
                onClick={handleParticipateClick}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300"
              >
                Participate Now
              </button>
            </>
          )}
        </div>

        {status !== "upcoming" && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold mb-4">Problems</h3>
            
            <div className="space-y-3">
              {contest.questions.map((question, index) => (
                <div 
                  key={question.id} 
                  className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50"
                >
                  <div className="flex items-center space-x-4">
                    <div className="w-8 h-8 bg-blue-100 text-blue-800 rounded-full flex items-center justify-center text-sm font-medium">
                      {String.fromCharCode(65 + index)}
                    </div>
                    <div>
                      <div className="font-medium text-gray-900">{question.title}</div>
                      <div className="text-sm text-gray-600">{question.points} points</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <Link
                      href={`/contests/${contest.id}/problems/${question.id}`}
                      className={`${status === "ongoing" ? "bg-blue-600 hover:bg-blue-700" : "bg-gray-600 hover:bg-gray-700"} text-white px-4 py-2 rounded transition-colors`}
                    >
                      {status === "ongoing" ? "Solve" : "View"}
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
